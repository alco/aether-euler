//
// ## Problem 2. Even Fibonacci numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
//         1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.
//

// TODO:
// Required primitives:
// * tuple
// * fn
// * loop
// * filter
// * take_while
// * fold with a binop

// Generate an infinite stream of Fibonacci numbers
// Clojure: (def fibs (lazy-cat [0 1] (map + fibs (rest fibs))))
fn fibseq() (
    concat([0 1], { fibseq(), rest(fibseq()) } -> plus)
)

fn fibs() (
    {1, 2} => loop fn (emit &1; {&2, &1+&2})
)

fn fibs_map() (
    {1, 2} => iterate fn({a,b}) {b, a+b} -> fn {a,_} a
)

fn fibs_for() (
    var a = 1, b = 2
    for (
        yield a
        a, b = b, a+b
    )
)

fn fibs_tail(a=1, b=2) (
    yield a
    goto fibs_tail(b, a+b)
)

fn fibs_tail2() (
    var ft = fn(a, b) (
        yield a
        recur(b, a+b)
    )
    ft(0, 1)
)

fn sum_fibs(max_num) (
    fibs()
    => take_while(fn &1 ≤ max_num)
    => filter(fn &1 mod 2 == 0)
    => '+

    // equivalent sequential code
    // var a, b = 1, 2
    // var sum = 0
    // while a ≤ max_num {
    //     if a mod 2 == 0 {
    //         sum += a
    //     }
    //     a, b = b, a+b
    // }
)

