//
// ## Problem 2. Even Fibonacci numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
//         1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.
//

// N is the inclusive upper bound on the sequence number value
def sum_even_fibs(N) (
  let fibs = [0, 1 .. fibs[ɩ-2] + fibs[ɩ-1]]
  let even? = 〖➀ mod 2 == 0〗

  fibs -> take_while(fn(n) n ≤ N) -> filter(odd?) -> fold('*)
  //
  var sum = 1
  for f in file.read("numbers").parse_numbers() (
    if (f > N) break
    if odd?(f) (
      sum = sum * f
    )
  )
  return sum
)

// -----------------------

// TODO:
// Required primitives:
// * tuple
// * fn
// * loop
// * filter
// * take_while
// * fold with a binop

// ---------------------

fn fibs_tail() (
  let fib = fn(a, b) (
    yield a
    goto fib(b, a+b)
  )
  fib(0, 1)
)

fn fibs_for() (
  var a = 0, b = 1
  loop (
    yield a
    {a, b} = {b, a+b}
  )
)

fn fibs() (
    let xs = [0, 1 ... xs[i-2] + xs[i-1]]; xs
    // var a = 0, b = 1
    // for (
    //   yield a
    //   var t = a
    //   a = b
    //   b = b + t
    // )
)

fn facts() (
    let xs = [1 ... i * xs[i-1]]; xs
    // var x = 1
    // for var i in seq(1..) (
    //   yield x
    //   x = x * i
    // )
)

fn seq(from, step) (
    let s = [from ... s[i-1] + step]; s
)

fn seq(from, step, to) when step ≠ 0 (
    let s = [from ... s[i-1] + step]
    s -> take_while(fn(x) step > 0 and x < to or x > to)
)

fn seq(from, step, count) (
    let s = [from ... s[i-1] + step]
    s -> take(count)
)

fn sum_fibs(max_num) (
    fibs()
    => take_while(fn &1 ≤ max_num)
    => filter(fn &1 mod 2 == 0)
    => '+

    // equivalent sequential code
    // var a, b = 1, 2
    // var sum = 0
    // while a ≤ max_num {
    //     if a mod 2 == 0 {
    //         sum += a
    //     }
    //     a, b = b, a+b
    // }
)

